# Disable the blank line at the start of the prompt
add_newline = true
command_timeout = 1000

format = """
[](fg:color_bg bg:color_cell_first)\
$directory\
[](fg:color_cell_first bg:color_cell_second)\
$git_branch\
$git_metrics\
$git_status\
[](fg:color_cell_second bg:color_cell_third)\
[](fg:color_cell_third bg:color_cell_fourth)\
[](fg:color_cell_fourth bg:color_cell_fifth)\
[](fg:color_cell_fifth)\
$fill\
$cmd_duration\
$time\
\n\
$sudo\
$character\
"""

right_format = """
$golang\
$python\
${custom.python_env}\
$nodejs\
$c\
"""

palette = 'tokyo_night_storm'

[palettes.tokyo_night_storm]
color_bg = "#1a1b26"
color_cell_first = "#2959aa"
color_cell_second = "#565f89"
color_cell_third = "#414868"
color_cell_fourth = "#343b58"
color_cell_fifth = "#24283b"
color_text = "#e6e7ed"
color_info = "#bb9af7"
color_success = "#9ece6a"
color_warning = "#e0af68"
color_error = "#f7768e"

[palettes.bubble_tea_princess]
color_bg = "#e8d6c3"          # Darker milk tea background
color_cell_first = "#d49a93"  # Muted rose pink
color_cell_second = "#b99bc1" # Dusty lavender
color_cell_third = "#a683b3"  # Deeper muted purple
color_cell_fourth = "#8faec0" # Muted slate blue
color_cell_fifth = "#d1b5b0"  # Dusty rose
color_text = "#3d3026"        # Darker brown text for contrast
color_info = "#b8656d"        # Deeper coral for info
color_success = "#5daf9d"     # Darker mint for success
color_warning = "#d9aa5b"     # Amber for warnings
color_error = "#c25e52"       # Darker red for errors

### Specify contents of left
[directory]
truncation_length = 1
truncation_symbol = "…/"
read_only = " 󰌾"
style = "bg:color_cell_first fg:color_text"
read_only_style = "bg:color_cell_first fg:color_warning"
format = "[$read_only]($read_only_style)[ $path ]($style)"

[git_branch]
symbol = ""
style = "bg:color_cell_second fg:color_text"
format = '[ $symbol $branch ]($style)'

[git_status]
style = "bg:color_cell_second fg:color_text"
format = '[$all_status$ahead_behind ]($style)'

[git_metrics]
disabled = false
added_style = "bg:color_cell_second fg:color_success"
deleted_style = "bg:color_cell_second fg:color_error"
format = '[+$added]($added_style)[-$deleted ]($deleted_style)'

[fill]
symbol = " "

[cmd_duration]
show_milliseconds = true
style = "fg:color_info"
format = "[󰜎 $duration]($style)"

[time]
disabled = false
time_format = "%R"
utc_time_offset = "local"
style = "italic fg:color_text"
format = "[  $time]($style)"

[sudo]
disabled = false
style = 'bold fg:color_warning'
symbol = ''
format = "[$symbol ]($style)"

[character]
success_symbol = "[❯](bold color_text)"
error_symbol = "[❯](bold color_error)"

### Specify contents of right
# Language specific display settings
[c]
detect_extensions = ['c', 'h', 'cpp', 'hpp']
symbol = ""
style = "fg:color_text"
format = ' [$symbol $version \($name\)]($style)'

[nodejs]
symbol = ""
style = "fg:color_text"
format = '[ $symbol $version]($style)'

[python]
symbol = ""
style = "fg:color_text"
format = " [$symbol $version]($style)"

[custom.python_env]
detect_extensions = ['py', 'ipynb']
detect_files = ['.python-version', 'Pipfile', '__init__.py', 'pyproject.toml', 'requirements.txt', 'setup.py', 'tox.ini']
command = '''
if command -v python >/dev/null 2>&1; then
    PYTHON_PATH=$(which python)
    
    # Check if it's a conda environment
    if [[ "$PYTHON_PATH" == *"/envs/"* ]]; then
        ENV_NAME=$(echo "$PYTHON_PATH" | sed -E 's|.*/envs/([^/]+)/.*|\1|')
        echo "-$ENV_NAME"
    # Check if it's in a conda base
    elif [[ "$PYTHON_PATH" == *"/miniconda"* ]] || [[ "$PYTHON_PATH" == *"/anaconda"* ]]; then
        echo "-base"
    # Check if it's a virtualenv (has activate script nearby)
    elif [[ -f "$(dirname $(dirname "$PYTHON_PATH"))/bin/activate" ]] || [[ -n "$VIRTUAL_ENV" ]]; then
        echo "-$(basename "$(dirname $(dirname "$PYTHON_PATH"))")"
    # Check if it's pyenv (bare version install)
    elif [[ "$PYTHON_PATH" == *"/.pyenv/versions/"* ]]; then
        echo "-pyenv"
    # Otherwise it's system Python
    else
        echo "-system"
    fi
fi
'''
style = "fg:color_text"
format = '[$output]($style)'

[golang]
symbol = ""
style = "fg:color_text"
format = " [$symbol $version]($style)"